"use strict";
var api = require("../api");
var clc = require("cli-color");
var FirebaseError = require("../error");
var loadCJSON = require("../loadCJSON");
var VALID_INDEX_MODES = ["ASCENDING", "DESCENDING", "ARRAY_CONTAINS"];
var _validate = function (index) {
    var indexString = clc.cyan(JSON.stringify(index));
    if (!index.collectionId) {
        throw new FirebaseError('Index must contain "collectionId": ' + indexString);
    }
    if (!index.fields) {
        throw new FirebaseError('Index must contain "fields": ' + indexString);
    }
    for (var i = 0; i < index.fields.length; i++) {
        var field = index.fields[i];
        if (!field.fieldPath) {
            throw new FirebaseError('All index fields must contain "fieldPath": ' + indexString);
        }
        if (!field.mode) {
            throw new FirebaseError('All index fields must contain "mode": ' + indexString);
        }
        if (VALID_INDEX_MODES.indexOf(field.mode) < 0) {
            throw new FirebaseError("Index field mode must be one of " + VALID_INDEX_MODES.join(", ") + ": " + indexString);
        }
    }
};
var create = function (project, index) {
    _validate(index);
    var url = "projects/" + project + "/databases/(default)/indexes";
    return api.request("POST", "/v1beta1/" + url, {
        auth: true,
        data: index,
        origin: api.firestoreOrigin,
    });
};
var list = function (project) {
    var url = "projects/" + project + "/databases/(default)/indexes";
    return api
        .request("GET", "/v1beta1/" + url, {
        auth: true,
        origin: api.firestoreOrigin,
    })
        .then(function (res) {
        var indexes = res.body.indexes || [];
        var result = [];
        for (var i = 0; i < indexes.length; i++) {
            var index = indexes[i];
            var sanitized = {};
            sanitized.collectionId = index.collectionId;
            sanitized.state = index.state;
            sanitized.fields = index.fields.filter(function (field) {
                return field.fieldPath !== "__name__";
            });
            result.push(sanitized);
        }
        return result;
    });
};
var equal = function (a, b) {
    if (a.collectionId !== b.collectionId) {
        return false;
    }
    if (a.fields.length !== b.fields.length) {
        return false;
    }
    for (var i = 0; i < a.fields.length; i++) {
        var aField = a.fields[i];
        var bField = b.fields[i];
        if (aField.fieldPath !== bField.fieldPath) {
            return false;
        }
        if (aField.mode !== bField.mode) {
            return false;
        }
    }
    return true;
};
var hash = function (index) {
    var result = "";
    result += index.collectionId;
    result += "[";
    for (var i = 0; i < index.fields.length; i++) {
        var field = index.fields[i];
        if (field.fieldPath === "__name__") {
            continue;
        }
        result += "(";
        result += field.fieldPath + "," + field.mode;
        result += ")";
    }
    result += "]";
    return result;
};
var toPrettyString = function (index) {
    var result = "";
    if (index.state) {
        var stateMsg = "[" + index.state + "] ";
        if (index.state === "READY") {
            result += clc.green(stateMsg);
        }
        else if (index.state === "CREATING") {
            result += clc.yellow(stateMsg);
        }
        else {
            result += clc.red(stateMsg);
        }
    }
    result += clc.cyan("(" + index.collectionId + ")");
    result += " -- ";
    index.fields.forEach(function (field) {
        if (field.fieldPath === "__name__") {
            return;
        }
        result += "(" + field.fieldPath + "," + field.mode + ") ";
    });
    return result;
};
var prepare = function (context, options) {
    var indexesFileName = options.config.get("firestore.indexes");
    var indexesPath = options.config.path(indexesFileName);
    var parsedSrc = loadCJSON(indexesPath);
    if (!parsedSrc.indexes) {
        throw new FirebaseError('Indexes file must contain "indexes" property: ' + indexesPath);
    }
    parsedSrc.indexes.forEach(function (index) {
        _validate(index);
    });
    context.firestore = context.firestore || {};
    context.firestore.indexes = {
        name: indexesFileName,
        content: parsedSrc,
    };
    return Promise.resolve();
};
module.exports = {
    create: create,
    list: list,
    equal: equal,
    hash: hash,
    toPrettyString: toPrettyString,
    prepare: prepare,
};
//# sourceMappingURL=indexes.js.map