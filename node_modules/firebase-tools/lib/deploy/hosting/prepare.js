"use strict";
var _ = require("lodash");
var clc = require("cli-color");
var api = require("../../api");
var convertConfig = require("./convertConfig");
var fsutils = require("../../fsutils");
var resolveProjectPath = require("../../resolveProjectPath");
var utils = require("../../utils");
var normalizedHostingConfigs = require("../../hosting/normalizedHostingConfigs");
var deploymentTool = require("../../deploymentTool");
module.exports = function (context, options) {
    if (options.public) {
        if (_.isArray(options.config.get("hosting"))) {
            return utils.reject("Cannot specify --public option with multi-site configuration.");
        }
        options.config.importLegacyHostingKeys();
        options.config.set("hosting.public", options.public);
    }
    var configs = normalizedHostingConfigs(options);
    if (configs.length === 0) {
        return Promise.resolve();
    }
    context.hosting = {
        deploys: configs.map(function (cfg) {
            return { config: cfg };
        }),
    };
    var versionCreates = [];
    _.each(context.hosting.deploys, function (deploy) {
        var cfg = deploy.config;
        if (cfg.target) {
            var matchingTargets = options.rc.requireTarget(options.project, "hosting", cfg.target);
            if (matchingTargets.length > 1) {
                return utils.reject("Hosting target " +
                    clc.bold(cfg.target) +
                    " is linked to multiple sites, but only one is permitted. To clear, run:\n\n  firebase target:clear hosting " +
                    cfg.target);
            }
            deploy.site = matchingTargets[0];
        }
        else if (cfg.site) {
            deploy.site = cfg.site;
        }
        else {
            return utils.reject('Must supply either "site" or "target" in each "hosting" config.');
        }
        if (!fsutils.dirExistsSync(resolveProjectPath(options.cwd, cfg.public))) {
            return utils.reject("Specified public directory '" +
                cfg.public +
                "'does not exist, can't deploy hosting to site " +
                deploy.site, {
                exit: 1,
            });
        }
        versionCreates.push(api
            .request("POST", "/v1beta1/sites/" + deploy.site + "/versions", {
            origin: api.hostingApiOrigin,
            auth: true,
            data: {
                config: convertConfig(cfg),
                labels: deploymentTool.labels,
            },
        })
            .then(function (result) {
            deploy.version = result.body.name;
        }));
    });
    return Promise.all(versionCreates);
};
//# sourceMappingURL=prepare.js.map