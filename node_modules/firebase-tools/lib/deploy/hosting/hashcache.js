"use strict";
var fs = require("fs-extra");
var path = require("path");
var logger = require("../../logger");
function cachePath(cwd, name) {
    return path.resolve(cwd, ".firebase/hosting." + name + ".cache");
}
exports.load = function (cwd, name) {
    try {
        var out_1 = {};
        lines = fs.readFileSync(cachePath(cwd, name), {
            encoding: "utf8",
        });
        lines.split("\n").forEach(function (line) {
            var d = line.split(",");
            if (d.length === 3) {
                out_1[d[0]] = { mtime: parseInt(d[1]), hash: d[2] };
            }
        });
        return out_1;
    }
    catch (e) {
        if (e.code === "ENOENT") {
            logger.debug("[hosting] hash cache [" + name + "] not populated");
        }
        else {
            logger.debug("[hosting] hash cache [" + name + "] load error:", e.message);
        }
        return {};
    }
};
exports.dump = function (cwd, name, data) {
    var st = "";
    var count = 0;
    for (var path_1 in data) {
        count++;
        st += path_1 + "," + data[path_1].mtime + "," + data[path_1].hash + "\n";
    }
    try {
        fs.outputFileSync(cachePath(cwd, name), st, { encoding: "utf8" });
        logger.debug("[hosting] hash cache [" + name + "] stored for", count, "files");
    }
    catch (e) {
        logger.debug("[hosting] unable to store hash cache [" + name + "]", e.stack);
    }
};
//# sourceMappingURL=hashcache.js.map